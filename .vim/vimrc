".vimディレクトリが無ければ作る
let s:vimdir = $HOME . '/.vim'
if has('vim_starting') && ! isdirectory(s:vimdir)
    call mkdir(s:vimdir)
endif
"全角スペースを血祭りに上げる,これより後にカラースキーマ
scriptencoding utf-8
augroup highlightIdegraphicSpace
  autocmd!
  autocmd Colorscheme * highlight IdeographicSpace term=underline ctermbg=DarkRed guibg=DarkRed
  autocmd VimEnter,WinEnter * match IdeographicSpace /　/
augroup END
"カラースキーマ molokaiがなければ持ってくる
if ! filereadable(s:vimdir . '/colors/molokai.vim')
    if executable('git') && confirm("Prepare molokai form github?", "Yes\nNo", 2) == 1
        echo 'Ok, now installing molokai'
        call system('git clone https://github.com/tomasr/molokai ' . s:vimdir)
        call system('rm ' . s:vimdir . '/LICENSE.md  ' .s:vimdir . '/README.md')
        colorscheme molokai
    else
        echo 'molokai is not installed'
    endif
else
    colorscheme molokai
endif
set t_Co=256
"折り返さない
set nowrap
" インクリメンタルサーチ. １文字入力毎に検索を行う
set incsearch
" ハイライトサーチを有効にする。
set hlsearch
" 大文字小文字を区別しない(検索時)
set ignorecase
" ただし大文字を含んでいた場合は大文字小文字を区別する(検索時)
set smartcase
" カーソル位置が右下に表示される
set ruler
" 行番号を付ける
set number
" タブ文字の表示 ^I で表示されるよ
set list
" コマンドライン補完が強力になる
set wildmenu
set wildmode=full
" コマンドを画面の最下部に表示する
set showcmd
" クリップボードを共有する
set clipboard=unnamed
" 改行時にインデントを引き継いで改行する
set autoindent
"自動インデント増減
set smartindent
" インデントにつかわれる空白の数
set shiftwidth=4
" <Tab>押下時の空白数
set softtabstop=4
" <Tab>押下時に<Tab>ではなく、ホワイトスペースを挿入する
set expandtab
" <Tab>が対応する空白の数
set tabstop=4
" インクリメント、デクリメントを16進数にする(0x0とかにしなければ10進数です。007をインクリメントすると010になるのはデフォルト設定が8進数のため)
set nf=hex
"改行時にインデント継続
set autoindent
" マウス使えます
if has('mouse')
  set mouse=a
endif
"バックスペースでの行移動を可能にする
set backspace=indent,eol,start
"その場にswpを作らない
set directory-=.
"undoを永続化
if has('persistent_undo')
    set undofile
    set undodir=~/tmp
endif
"ステータスラインを常に表示
set laststatus=2
" カーソル行を強調表示
set cursorline
"lightlineがあるから、挿入モードとか表示しない
set noshowmode
augroup MyAutoCmd
    autocmd!
    "保存時に行末スペースを取り除く
    autocmd BufWritePre * %s/\s\+$//e
    "テンプレートファイル
    autocmd BufNewFile *.c 0r $HOME/.vim/template/main.c
    "ファイル指定無しでvimを開いたらNerdTreeを開く
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
augroup END
if has("autocmd")
  " 編集箇所のカーソルを記憶
  augroup redhat
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
  augroup END
endif

""""""""""""""""""""""""
"オリジナルキーバインド"
""""""""""""""""""""""""
let mapleader = "\<Space>"
"コード補完するとき
inoremap <C-l> <C-p>
" インサートモードの時に C-j でノーマルモードに戻る
inoremap <C-j> <esc>
vnoremap <C-j> <esc>
"C-dでその場の文字を消す
noremap <C-d> <Del>
inoremap <C-d> <Del>
"C-hで前の文字を消す
noremap <C-h> <LEFT><Del>
"表示上のj, k移動を取り替え
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
"NERDTreeのショートカット
nnoremap <Leader>n  :NERDTree<CR>
"押しにくい移動を便利に
noremap <Leader>h ^
noremap <Leader>l $
"コメントの色を変える
noremap <Leader>c :call CommentHl()<CR>
let s:commentHlNumber = 0
function! CommentHl()
    if s:commentHlNumber == 0
        :hi Comment ctermfg=white
        let s:commentHlNumber = 1
    elseif s:commentHlNumber == 1
        :hi Comment ctermfg=green
        let s:commentHlNumber = 2
    else
        :hi Comment ctermfg=grey
        let s:commentHlNumber = 0
    endif
endfunction
" ２回esc を押したら検索のハイライトをヤメる
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>
"vimrcを開く
nnoremap <Leader>. :tabnew<CR>:e ~/.vimrc<CR>
"*を使って検索したときに移動しない
noremap * *N
nnoremap <Leader>re :%s/<C-R><C-W>//gc<Left><Left><Left>
"tab移動
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <C-t> :tabnew<CR>


"""""""""""""""""""""""""
"Emacsライクな挿入モード"
"""""""""""""""""""""""""
inoremap <C-f> <Right>
inoremap <C-b> <Left>
"undo
inoremap <silent> <C-u> <C-g>u<C-r>=MyExecExCommand('undo', 'onemore')<CR>
"行頭へ
inoremap <silent> <C-a> <C-r>=MyJumptoBol('　。、．，／！？「」')<CR>
"行末へ
inoremap <silent> <C-e> <C-r>=MyJumptoEol('　。、．，／！？「」')<CR>
"カーソル以降の単語削除
inoremap <silent> <C-k> <C-g>u<C-r>=MyExecExCommand('normal! D', 'onemore')<CR>
"非補完時は行移動をj,kと同じ動作にして補完中は候補選択
inoremap <silent> <expr> <C-p>  pumvisible() ? "\<C-p>" : "<C-r>=MyExecExCommand('normal k')<CR>"
inoremap <silent> <expr> <C-n>  pumvisible() ? "\<C-n>" : "<C-r>=MyExecExCommand('normal j')<CR>"
inoremap <silent> <expr> <Up>   pumvisible() ? "\<C-p>" : "<C-r>=MyExecExCommand('normal k')<CR>"
inoremap <silent> <expr> <Down> pumvisible() ? "\<C-n>" : "<C-r>=MyExecExCommand('normal j')<CR>"
"sepが空でなければ、sepをセパレータとしてジャンプ。
"見つからなければ行末へ。除
function! MyJumptoEol(sep)
  if col('.') == col('$')
    silent exec 'normal! w'
    return ''
  endif
  if a:sep != ''
    let prevcol = col('.')
    call search('['.a:sep.']\+[^'.a:sep.']', 'eW', line("."))
    if col('.') != prevcol
      return ''
    endif
  endif
  call cursor(line('.'), col('$'))
  return ''
endfunction
"sepが空でなければ、sepをセパレータとしてジャンプ。
"見つからなければ見かけの行頭へ。
"カーソル位置が見かけの行頭の場合は真の行頭へ。
function! MyJumptoBol(sep)
  if col('.') == 1
    call cursor(line('.')-1, col('$'))
    call cursor(line('.'), col('$'))
    return ''
  endif
  if matchend(strpart(getline('.'), 0, col('.')), '[[:blank:]]\+') >= col('.')-1
    silent exec 'normal! 0'
    return ''
  endif
  if a:sep != ''
    call search('[^'.a:sep.']\+', 'bW', line("."))
    if col('.') == 1
      silent exec 'normal! ^'
    endif
    return ''
  endif
  exec 'normal! ^'
  return ''
endfunction
"IMEの状態とカーソル位置保存のため<C-r>を使用してコマンドを実行。
function! MyExecExCommand(cmd, ...)
  let saved_ve = &virtualedit
  let index = 1
  while index <= a:0
    if a:{index} == 'onemore'
      silent setlocal virtualedit+=onemore
    endif
    let index = index + 1
  endwhile
  silent exec a:cmd
  if a:0 > 0
    silent exec 'setlocal virtualedit='.saved_ve
  endif
  return ''
endfunction
"Emcasライクな挿入モード終了:

""""""""""""""
"dein Scripts"
""""""""""""""
if &compatible
  set nocompatible               " Be iMproved
endif
"dein.vimインストール時に指定したディレクトリをセット
let s:dein_dir = expand('~/.vim/dein')
"dein.vimの実体があるディレクトリをセット
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
" dein.vimが存在していない場合はgithubからclone
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif
"dein.toml, dein_layz.tomlファイルのディレクトリをセット
let s:toml_dir = expand('~/.vim')
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
 "起動時に読み込むプラグイン群
  call dein#load_toml(s:toml_dir . '/dein.toml', {'lazy': 0})
 "遅延読み込みしたいプラグイン群
  call dein#load_toml(s:toml_dir . '/dein_lazy.toml', {'lazy': 1})
  call dein#end()
  call dein#save_state()
endif
" Required:
filetype plugin indent on
syntax enable
" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif
"End dein Scripts------------------------- "
"
